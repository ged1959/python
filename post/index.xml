<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on ぐだぐだ版 python memo</title>
    <link>http://ged1959.github.io/python/post/</link>
    <description>Recent content in Posts on ぐだぐだ版 python memo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Tue, 03 May 2016 13:52:54 +0900</lastBuildDate>
    <atom:link href="http://ged1959.github.io/python/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>仮想環境の構築について</title>
      <link>http://ged1959.github.io/python/post/virtual/</link>
      <pubDate>Tue, 03 May 2016 13:52:54 +0900</pubDate>
      
      <guid>http://ged1959.github.io/python/post/virtual/</guid>
      <description>

&lt;p&gt;仮想環境を作る、と。はまった。&lt;/p&gt;

&lt;h2 id=&#34;基礎知識-または-前提条件:658b16d50c0c6eec40d61e0af7ae1268&#34;&gt;基礎知識、または、前提条件&lt;/h2&gt;

&lt;p&gt;まずは、ご本家かどうか、こんな説明（&lt;a href=&#34;https://packaging.python.org/en/latest/installing/#creating-virtual-environments&#34;&gt;Installing Packages — Python Packaging User Guide documentation&lt;/a&gt;）。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Currently, &lt;strong&gt;there are two viable tools&lt;/strong&gt; for creating Python virtual environments: &lt;strong&gt;virtualenv&lt;/strong&gt; and &lt;strong&gt;pyvenv&lt;/strong&gt;. pyvenv is only available in Python 3.3 &amp;amp; 3.4, and only in Python 3.4, is pip &amp;amp; setuptools installed into environments by default, whereas virtualenv supports Python 2.6 thru Python 3.4 and pip &amp;amp; setuptools are installed by default in every version.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;となると、2.7系を使うにはvirtualenvとなる。それで、その作成方法は以下。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://lh3.googleusercontent.com/9FWF4XAOykefjlFa-4tHuHrzTbyTzVRqtK2NywWmka3lZeBVNJY_sYYKc9gpDld78c0IaK6CSGqqhtkwBZrUSXL1eCVCX8O1f_d7X1ZxpQwKwljPeJiN4V8-JgM5IA296LuPtVlHVrd4vbjzRby4mRdu9ApEjGJH1uelTa-b7a3GwtAueUS6YkQzynAqoitnuS9Jhp5ft9HzN6prqq0l2bJLwPqnrA10gW-IUnFAzskFic5rkM4zeQOG6JBIwhJL8xNDT21o8mMTXr9TVHnx0wUZK3yx_6nZ8n898Al5UWmiP2DgGaKnIQ2l3arfLCCw81vCNYTcGbfRucYzxmuv1CZ1r5X-V3G_ifmFB8JCzlWi25le88QRoQAz6Ax6s2FbKvDfJIcvexLEw5yAfBZZAgk1lCMMWgteOjJfhf3_v5bdE9dZWxspdWX53RD4dcEuuP_IZ5MeRBdQaUw8ytm0bKEWE_sEoJqcWpXcgCzX0cPALqQPzNd_c6nbnEtfAmzJ_lVQ5ga2bVOxrTqs8CGmWO2sNtw_mf4ya40-S5nza3EW_FFboPSFq_0wK2PCoc2dQlzescDr0lJv9-LjFkLM2JMuRlS49DY=w1066-h1434-no&#34; alt=&#34;&#34; style=&#34;width:60%;&#34;&gt;&lt;/p&gt;

&lt;p&gt;コマンドとしては以下。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;mkvirtualenv --python=c:\Python27\python.exe hoge&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;これで、python2.7系でも環境設定できる。上のキャプチャ写真の上の方に、helpが出ている。これを真似た。&lt;/p&gt;

&lt;h2 id=&#34;venvの使い方:658b16d50c0c6eec40d61e0af7ae1268&#34;&gt;venvの使い方&lt;/h2&gt;

&lt;p&gt;これでも、pytho2.7使える、という話（&lt;a href=&#34;http://qiita.com/manzyun/items/17ea7ebd394e16935155&#34;&gt;pyvenvで別のバージョンのPythonを指定したい - Qiita&lt;/a&gt;）もあるのだけど、自分は、今のところ再現できてない。むむむ…。&lt;/p&gt;

&lt;p&gt;で、こちらは、ディレクトリを管理できる。自分で作成したディレクトリの中で仮想環境が完結、してるみたい。作り方は以下。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;C:\Users\username\Documents&amp;gt; python -m venv venvtest&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;こんなイメージ。で、できたディレクトリごと消せば、仮想環境も削除。&lt;/p&gt;

&lt;p&gt;それから動かすときは、以下のように、ディレクトリを移動してから、&lt;code&gt;activate&lt;/code&gt;とする。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;C:\Users\username\Documents\venvtest\Scripts\activate&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;virtualenvの使い方:658b16d50c0c6eec40d61e0af7ae1268&#34;&gt;virtualenvの使い方&lt;/h2&gt;

&lt;p&gt;普通に仮想環境の&lt;code&gt;hoge&lt;/code&gt;を作ると、以下。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;mkvirtualenv hoge&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;動かし方は以下。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;workon hoge&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;仮想環境は、&lt;code&gt;C:\Users\ged\Envs&lt;/code&gt;にある。どうしたことが、globalで動くけど……。新しいディレクトリが勝手にできてた。仮想環境を増やすと、ここに加わる。どんな仮想環境があるか、それは以下。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;workon&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;問題は削除。二段階で。まず以下。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;rmvirtualenv hoge&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;これで内部のファイルが消える。でも、&lt;code&gt;Envs&lt;/code&gt;の中にフォルダが残る。ので、消す。&lt;/p&gt;

&lt;h2 id=&#34;その他のリンク:658b16d50c0c6eec40d61e0af7ae1268&#34;&gt;その他のリンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/nobolis/items/12a464557f2ae007e9a1&#34;&gt;Windowsでpyenvとかvirtualenvを使おうと思ったときに学んだことのメモ - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/nobolis/items/6f818202c57213944eb6&#34;&gt;pyvenvをWindowsで使う - Qiita&lt;/a&gt; ==&amp;gt; pyvenvとvenvの違いが判るような。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.muuny-blue.info/b3ddb7c5b10be95dbc3f9152c58becce.html&#34;&gt;pyenvとvenvでPython3開発環境を整える&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.slideshare.net/who_you_me/10-32435124?ref=https://career.levtech.jp/guide/knowhow/article/21/?utm_source=dlvr.it&amp;amp;utm_medium=twitter&#34;&gt;10分でわかるPythonの開発環境&lt;/a&gt; ==&amp;gt; インストールの方法。&lt;strong&gt;windowsではmacとは違う。&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;以上は、基礎知識。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://timmyreilly.azurewebsites.net/python-pip-virtualenv-installation-on-windows/&#34;&gt;Python, Pip, virtualenv installation on Windows | timbo&lt;/a&gt; ==&amp;gt; 分かりやすい。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/_rdtr/items/5f3a9a9e2cb5a24f284e&#34;&gt;Virtualenvwrapperの導入 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://ymotongpoo.hatenablog.com/entry/2012/09/03/002604&#34;&gt;Python3.3のvenvを試す - YAMAGUCHI::weblog&lt;/a&gt; ==&amp;gt; pyvenv.pyの秘密について。&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>mysqlとか、その関連</title>
      <link>http://ged1959.github.io/python/post/mysql_01/</link>
      <pubDate>Mon, 11 Apr 2016 01:33:41 +0900</pubDate>
      
      <guid>http://ged1959.github.io/python/post/mysql_01/</guid>
      <description>

&lt;p&gt;データベースが必要そうなので。MySQLを入れる、と。&lt;/p&gt;

&lt;p&gt;すごく動作が遅くなっている（2016.0410）けれど、東大のサイト「&lt;a href=&#34;http://gci.t.u-tokyo.ac.jp/tutorial/rdb/&#34;&gt;データベースによるデータ管理 | 東京大学グローバル消費インテリジェンス寄附講座&lt;/a&gt;」に、MySQLがいろいろ書いてあるのが理由。&lt;/p&gt;

&lt;p&gt;ただ、データ分析だけなら、MySQLは、必ずしも必要ないかもしれない。&lt;/p&gt;

&lt;h2 id=&#34;mysqlについて-windowsの場合:cac26e914ba27802fc197dd8f99fe198&#34;&gt;MySQLについて、Windowsの場合&lt;/h2&gt;

&lt;p&gt;シンプルなインストールでいいか、と思う。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/yuann/items/6d4a93139315a485e127&#34;&gt;Windows環境でMySQL - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.codecamp.jp/mysql_install&#34;&gt;初心者のためのMySQL講座～インストール編～ | Code部&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.codecamp.jp/mysql_connect&#34;&gt;初心者のためのMySQL講座～接続編～ | Code部&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dev.mysql.com/doc/refman/5.6/ja/windows-installation-layout.html&#34;&gt;MySQL :: MySQL 5.6 リファレンスマニュアル :: 2.3.1 Microsoft Windows 上での MySQL のインストールレイアウト&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;けれど、PHPやApacheが必要とかいう人もいて…。Windowsに直接入れられる、というはびっくりだけど。初めて知った。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://kt-kiyoshi.com/wp/2015/09/19/apache_php_on_windows10_without_xampp/&#34;&gt;XAMPPを使わず、Windows10にApache&amp;amp;PHP環境を構築する | 超日記&lt;/a&gt; ==&amp;gt; 「&lt;strong&gt;XAMPPを使わず&lt;/strong&gt;」がすごい。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.webdlab.com/guide/local-mysql-4/&#34;&gt;Windows 10にMySQLをインストール – Webデザインラボ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.webdlab.com/guide/local-apache-9/&#34;&gt;Windows 10にApache2.4 VC11をインストール – Webデザインラボ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.webdlab.com/guide/local-php-9/&#34;&gt;Windows 10にPHP5.6 VC11をインストール – Webデザインラボ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://ryus.co.jp/blog/windows10-php5-2-xampp/&#34;&gt;Windows10でPHP5.2が動く開発環境を作りあげるまでの紆余曲折について | RYUS blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://detail.chiebukuro.yahoo.co.jp/qa/question_detail/q14156312774&#34;&gt;今、windows10でPHPの開発環境を作成しています！Mysqlがmysql-5.1.43&amp;hellip; - Yahoo!知恵袋&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://kubotti.hatenablog.com/entry/2015/11/03/232014&#34;&gt;Windows10にphp 5.６インストールメモ - kubotti’s memo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://wataame.sumomo.ne.jp/archives/7071&#34;&gt;Windows10(64Bit版)にApache2.4、PHP5.6をインストールする方法 | Wataame Frog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;で、あまたのインストールには、VSにC++が必要だったり、と。コンパイルするんだと。勉強にはなる。&lt;/p&gt;

&lt;p&gt;でもなぁ、WindowsネイティブにApacheいるか？そんなに使うのかどうか、疑問。これならcloud9で十分な気がする。&lt;/p&gt;

&lt;h2 id=&#34;データ分析:cac26e914ba27802fc197dd8f99fe198&#34;&gt;データ分析&lt;/h2&gt;

&lt;p&gt;（未整理）&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://myenigma.hatenablog.com/entry/2015/10/17/220353&#34;&gt;簡単にデータ解析をすることができるPythonライブラリPandas入門 - MyEnigma&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/hik0107/items/19dd2f6a4ab61ec21905&#34;&gt;Pythonでデータ分析するのに必要なツールのまとめ - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.graffe.jp/blog/2386/&#34;&gt;Python言語とは？ ～データ分析に向いているプログラミング言語～｜データ分析用語を解説 - データビジュアライズで経営を視える化する/graffe グラーフ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://openbook4.me/projects/183/sections/1118&#34;&gt;環境構築 (Pythonを使ったデータ解析入門 3idea) | OpenBook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.recruit-tech.co.jp/2016/03/01/visualization_2016/&#34;&gt;分析結果を楽にカッコよく可視化する方法~2016年版~ | RECRUIT TECHNOLOGIES Member&amp;rsquo;s blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.runserver.jp/reading.html&#34;&gt;Pythonでできること — RUNSERVER WEB SITE&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;おまけ:cac26e914ba27802fc197dd8f99fe198&#34;&gt;おまけ&lt;/h2&gt;

&lt;p&gt;（未整理）&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.slideshare.net/ymotongpoo/python-14301992?next_slideshow=1&#34;&gt;Pythonを取り巻く開発環境 #pyconjp&lt;/a&gt;。環境を汚さない、方法が出ていた。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.slideshare.net/who_you_me/10-32435124?qid=e3f307ee-e28f-430a-87e7-a65ad04bda8c&amp;amp;v=&amp;amp;b=&amp;amp;from_search=7&#34;&gt;10分でわかるPythonの開発環境&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;やっぱ-cloud9試す:cac26e914ba27802fc197dd8f99fe198&#34;&gt;やっぱ、cloud9試す！！&lt;/h2&gt;

&lt;p&gt;外のパソコンとかでも、開発できるなら、cloud9だと思う。問題は、ファイルとか、どこに保管するか…。直接できるのだろうか。ここから。&lt;/p&gt;

&lt;p&gt;まず基礎。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://tech.pjin.jp/blog/2015/12/03/%e3%82%aa%e3%83%b3%e3%83%a9%e3%82%a4%e3%83%b3ide%e3%80%80cloud9%e3%82%92%e4%bd%bf%e3%81%a3%e3%81%a6%e3%81%bf%e3%82%8b%e3%80%80%e3%81%9d%e3%81%ae1/&#34;&gt;オンラインIDE　Cloud9を使ってみる　その1 | TECH Projin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://tech.pjin.jp/blog/2015/12/14/%e3%82%aa%e3%83%b3%e3%83%a9%e3%82%a4%e3%83%b3ide%e3%80%80cloud9%e3%82%92%e4%bd%bf%e3%81%a3%e3%81%a6%e3%81%bf%e3%82%8b%e3%80%80%e3%81%9d%e3%81%ae2/&#34;&gt;オンラインIDE　Cloud9を使ってみる　その2 | TECH Projin&lt;/a&gt; ==&amp;gt; 「驚きの機能」&amp;gt;&amp;gt;「自動の「更新履歴管理」機能」&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://techacademy.jp/magazine/6168&#34;&gt;プログラミングの開発環境に便利！Cloud9の使い方 | TechAcademyマガジン&lt;/a&gt; ==&amp;gt; WPもできるらしい。簡単。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.iterative.co.jp/blog/online-ide-service-cloud9-first-part/&#34;&gt;簡単にプログラミング環境が構築できる「Cloud9」の始め方(前篇) | 株式会社イテレイティブ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.iterative.co.jp/blog/online-ide-service-cloud9-second-part/&#34;&gt;簡単にプログラミング環境が構築できる「Cloud9」の始め方(中篇) | 株式会社イテレイティブ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.iterative.co.jp/blog/online-ide-service-cloud9-third-part/&#34;&gt;簡単にプログラミング環境が構築できる「Cloud9」の始め方(後篇) | 株式会社イテレイティブ&lt;/a&gt; ==&amp;gt; 「作業を中断する場合には「File」から「Save」を行ってから、上部メニューの「Cloud9」から「Quit Cloud9」を選んでクリックすると、ワークスペース画面に切り替わります」。MySQLも。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/ao_love/items/31b660ab53bee959c940&#34;&gt;Cloud9でMySQLを使う - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.c9.io/v1.0/docs/setting-up-mysql&#34;&gt;Setting Up MySQL · Cloud9&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;パッケージまでは入るんだけど、MySQLは難しい……。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://community.c9.io/t/installing-python-packages/1611&#34;&gt;Installing Python Packages - How To - Cloud9 Community&lt;/a&gt; ==&amp;gt; markdownのパッケージ。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://uxmilk.jp/23509&#34;&gt;PythonでMySQLを操作する方法：MySQLdb | UX MILK&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.python-izm.com/contents/external/mysql.shtml&#34;&gt;MySQL - Python入門から応用までの学習サイト&lt;/a&gt; ==&amp;gt; つまずき中。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ほんと、MySQLだけなら、なんとかなるんだけど…。フム。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>file_objectの日本語とか</title>
      <link>http://ged1959.github.io/python/post/file_object/</link>
      <pubDate>Sun, 27 Mar 2016 12:58:18 +0900</pubDate>
      
      <guid>http://ged1959.github.io/python/post/file_object/</guid>
      <description>

&lt;p&gt;改めて、「超」入門は、説明不足だなぁ。自分で調べろ、という励ましということで。で、今回は、file_object。p.183の当たり。&lt;/p&gt;

&lt;h2 id=&#34;日本語のファイル:ac620a139cc404435d5976b4f587c7ae&#34;&gt;日本語のファイル&lt;/h2&gt;

&lt;p&gt;英語なら、「超」の通りなのだけど、日本語はだめ。エラーが続出する。
答え。==&amp;gt; &lt;a href=&#34;http://news.mynavi.jp/series/python/014/&#34;&gt;Pythonで学ぶ 基礎からのプログラミング入門 (14) Pythonで日本語を扱うには? - 文字コードについて理解しよう | マイナビニュース&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;つまり、&lt;code&gt;open()&lt;/code&gt;じゃなくて、&lt;code&gt;codecs.open()&lt;/code&gt;を使う、と。&lt;code&gt;import codecs&lt;/code&gt;のあとで。&lt;/p&gt;

&lt;h2 id=&#34;外部ライブラリ:ac620a139cc404435d5976b4f587c7ae&#34;&gt;外部ライブラリ&lt;/h2&gt;

&lt;p&gt;いろんな外部ライブラリ ==&amp;gt; &lt;a href=&#34;https://pypi.python.org/pypi&#34;&gt;PyPI - the Python Package Index : Python Package Index&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>date</title>
      <link>http://ged1959.github.io/python/post/howtodate/</link>
      <pubDate>Sun, 27 Mar 2016 11:42:06 +0900</pubDate>
      
      <guid>http://ged1959.github.io/python/post/howtodate/</guid>
      <description>

&lt;p&gt;つまづいたので。それにしても、なんで「超」入門は、コマンドライン入力ばかりなの？　バグがあると、全部入力し直さなくてはいけなくなる。面倒だなぁ。この件も、一体なぜなのか？&lt;/p&gt;

&lt;h2 id=&#34;日付の表示:26894f48f2b47b2b978e3b6ec280820a&#34;&gt;日付の表示&lt;/h2&gt;

&lt;p&gt;ここに書いた。&lt;code&gt;chou0327.py&lt;/code&gt;。ふーっ。一応、5つのどの方法でも、&lt;code&gt;2016年3月27日&lt;/code&gt;と出る。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# coding: utf-8
# 「超」入門。p.163

&#39;&#39;&#39;
このページのコードはうまくいかない。これ。python2、3のどちらでも。

&amp;gt;&amp;gt;&amp;gt; today.strftime(&#39;%Y年%m月%d日&#39;)

エラーは以下。

&amp;gt;&amp;gt;&amp;gt; today.strftime(&#39;%Y年%m月%d日&#39;)
Traceback (most recent call last):
  File &amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;, line 1, in &amp;lt;module&amp;gt;
UnicodeEncodeError: &#39;locale&#39; codec can&#39;t encode character &#39;\u5e74&#39; in position 2: Il
legal byte sequence

考えられること。==&amp;gt; strftimeの使い方のミス？引数の指定方法？

いずれにせよ、年月日での表示は必須（になる可能性がある）。どんくさい方法でも試しておく。
&#39;&#39;&#39;

# 1. たぶん、最もどんくさい。
from datetime import date
date.today()
kyou = date.today()
kyounen = str(kyou.year)
kyoutuki = str(kyou.month)
kyoubi = str(kyou.day)
print (kyounen+&amp;quot;年&amp;quot;+kyoutuki+&amp;quot;月&amp;quot;+kyoubi+&amp;quot;日&amp;quot;)

# 2. もっとコンパクトにならんのか。
print (&#39;{0}年{1}月{2}日&#39;.format(kyounen, kyoutuki, kyoubi))

# 3. もっと、もっと。
print (&#39;{0}年{1}月{2}日&#39;.format(kyou.year, kyou.month, kyou.day))

# 4. もっと、もっと、もっと。これなら2行になるが…。
print (&#39;{0}年{1}月{2}日&#39;.format(date.today().year, date.today().month, date.today().day))

# 5. 別の方法
print (str(kyou.year)+&amp;quot;年&amp;quot;+str(kyou.month)+&amp;quot;月&amp;quot;+str(kyou.day)+&amp;quot;日&amp;quot;)

# でも、どれもどんくさい。いい方法はないのか。
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>zenという思想？</title>
      <link>http://ged1959.github.io/python/post/zen/</link>
      <pubDate>Sat, 26 Mar 2016 15:44:25 +0900</pubDate>
      
      <guid>http://ged1959.github.io/python/post/zen/</guid>
      <description>

&lt;p&gt;「超」入門。p.38。&lt;/p&gt;

&lt;h2 id=&#34;コーディング規約:81d41a8a13b907c9f2bac0ed4482cddd&#34;&gt;コーディング規約&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt;import this
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;The Zen of Python, by Tim Peters

Beautiful is better than ugly.
Explicit is better than implicit.
Simple is better than complex.
Complex is better than complicated.
Flat is better than nested.
Sparse is better than dense.
Readability counts.
Special cases aren&#39;t special enough to break the rules.
Although practicality beats purity.
Errors should never pass silently.
Unless explicitly silenced.
In the face of ambiguity, refuse the temptation to guess.
There should be one-- and preferably only one --obvious way to do it.
Although that way may not be obvious at first unless you&#39;re Dutch.
Now is better than never.
Although never is often better than *right* now.
If the implementation is hard to explain, it&#39;s a bad idea.
If the implementation is easy to explain, it may be a good idea.
Namespaces are one honking great idea -- let&#39;s do more of those!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;なるほど。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>基礎中の基礎はこちらで</title>
      <link>http://ged1959.github.io/python/post/dot_install/</link>
      <pubDate>Mon, 21 Mar 2016 16:33:26 +0900</pubDate>
      
      <guid>http://ged1959.github.io/python/post/dot_install/</guid>
      <description>

&lt;p&gt;基礎中の基礎は、いつもお世話になっている「&lt;a href=&#34;http://dotinstall.com/&#34;&gt;ドットインストール&lt;/a&gt;」さんで学ぶ。「&lt;a href=&#34;http://dotinstall.com/lessons/basic_python_v2&#34;&gt;Python入門 (全24回) - プログラミングならドットインストール&lt;/a&gt;」から。&lt;/p&gt;

&lt;h2 id=&#34;データ型-none:1fc9a072d3fdaf982f21604947550d10&#34;&gt;データ型、None&lt;/h2&gt;

&lt;p&gt;相当に基礎なのだろうけど、&lt;a href=&#34;http://dotinstall.com/lessons/basic_python_v2/26003&#34;&gt;#03 変数とデータ型について | Python入門 - プログラミングならドットインストール&lt;/a&gt;の部分。ソースというか、解説メモにある&lt;code&gt;None&lt;/code&gt;が謎である。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# coding: UTF-8
# 変数（データにつけるラベル）

# データ型
# 数値
# 真偽値 True False
# None
# 関数・オブジェクト
# 要素が並んだもの
# - 文字列：文字が並んだもの
# - リスト：データが並んだもの
# - タブル：データが並んだもの（変更ができない）
# - セット：データが並んだもの（重複を許さない）
# - 辞書：キーと値がペア

msg = &amp;quot;hello world&amp;quot; 
print msg
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ので、調べる。というか、ググる。まず出てきたのが、「&lt;a href=&#34;http://monmon.hateblo.jp/entry/20110214/1297710749&#34;&gt;PythonではNoneの比較は==ではなくisを使う - こんにちはこんにちはmonmonです！&lt;/a&gt;」と、目を引くのが出てきた。あと、「&lt;a href=&#34;http://d.hatena.ne.jp/artgear/20131018/three_python_tricks&#34;&gt;Pythonを勉強していて「こういう書き方があったのか」と思ったことを3つ - 主にプログラムを勉強するブログ&lt;/a&gt;」とか。なんじゃ？そもそも、&lt;code&gt;None&lt;/code&gt;が意味不明なんだから、まだ、自分には早い。で、後の方のリンクに、以下のような比較構文があると。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if 1 &amp;lt; a &amp;lt; 5:
    print u&#39;aは1から5の間&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ホンマ？試す。&lt;code&gt;test0321.py&lt;/code&gt;に。便利だ。また寄り道だが、「&lt;a href=&#34;http://www.pythonweb.jp/tutorial/if/index3.html&#34;&gt;真(true)と偽(false) - 条件分岐 - Python入門&lt;/a&gt;」には、以下のコード。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;print &amp;quot;True = &amp;quot;, True
print &amp;quot;False = &amp;quot;, False

print &amp;quot;True + 3 = &amp;quot;, True + 3

if True:
  print &amp;quot;Always True&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;でも、&lt;code&gt;print hoge&lt;/code&gt;はダメ。当たり前だけど。&lt;/p&gt;

&lt;p&gt;で、上を見ていると気が付くのは、&lt;code&gt;print&lt;/code&gt;という関数は奥が深いみたい、ということで、調べてみたら、以下のようなサイトに。「&lt;a href=&#34;http://www.lifewithpython.com/2013/08/print-statement.html&#34;&gt;Pythonのprint文 - Life with Python&lt;/a&gt;」「&lt;a href=&#34;http://qiita.com/yuukiclass/items/760b9cd85f503fd03fbd&#34;&gt;pythonのprint内で変数に代入されている数字や文字を表示する - Qiita&lt;/a&gt;」「&lt;a href=&#34;http://www.python-izm.com/contents/basis/print.shtml&#34;&gt;print文 - Python入門から応用までの学習サイト&lt;/a&gt;」。&lt;/p&gt;

&lt;p&gt;寄り道しすぎだ。今は、&lt;code&gt;None&lt;/code&gt;。「&lt;a href=&#34;http://diveintopython3-ja.rdy.jp/native-datatypes.html&#34;&gt;ネイティブデータ型 - Dive Into Python 3 日本語版&lt;/a&gt;」には、こんな説明。なんだか哲学的。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;NoneはPythonの特別な定数で、これはnull値（無効値）である。NoneはFalseではないし、0でもないし、空の文字列でもない。NoneをNone以外の値と比較すると、常にFalseが返る。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;で、また寄り道だけど、このサイトは、「&lt;a href=&#34;http://diveintopython3-ja.rdy.jp/whats-new.html&#34;&gt;Dive Into Python 3 で新しくなったこと&lt;/a&gt;」＜「&lt;a href=&#34;http://diveintopython3-ja.rdy.jp/index.html&#34;&gt;Dive Into Python 3 日本語版&lt;/a&gt;」なっていて、前者に以下の記述。いつか見てみよう。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Python 3には2to3というスクリプトが付属している。これを学び、これを愛し、これを使おう。2to3を使ってコードをPython 3へ移植するは、2to3で自動的に何が修正できるのかを全て集めたレファレンスとなっている。その多くは構文の変更なので（printは今や関数であり、&lt;code&gt;x&lt;/code&gt;はもう使えない、などなど）、この章はPython 3でなされた多くの構文の変更について学ぶ良い足がかりになる。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;「&lt;a href=&#34;http://www.geocities.jp/m_hiroi/light/python02.html&#34;&gt;お気楽 Python プログラミング入門&lt;/a&gt;」には、&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Python の場合、関数の返り値は return を使って返します。これはＣ言語と同じです。Perl のように、ブロックの最後で実行された処理結果が返り値とはなりません。return のない関数は None というデータを返します。None は Python の中でただ一つしか存在しない特別なデータ型で、値がないことや偽 (False) を表すために使用されます。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;で、結論。必要になったら、勉強しよう。&lt;/p&gt;

&lt;h2 id=&#34;複素数とは:1fc9a072d3fdaf982f21604947550d10&#34;&gt;複素数とは&lt;/h2&gt;

&lt;p&gt;次に、「&lt;a href=&#34;http://dotinstall.com/lessons/basic_python_v2/26004&#34;&gt;#04 数値を使ってみよう | Python入門 - プログラミングならドットインストール&lt;/a&gt;」。自分で勉強して、という「複素数」だ。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# coding: UTF-8
# 数値
# 整数、小数、複素数

# 演算子 + - * / // % **
print 10 * 5 # 50
print 10 // 3 # 3
print 10 % 3 # 1
print 2 ** 3 # 8

# 整数と小数の演算 → 小数
print 5 + 2.0

# 整数同士の割り算 → 切り捨ての整数
print 10 / 3.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;さっそく、ググる。うひゃ、すぐ出た。「&lt;a href=&#34;http://qiita.com/shuhei/items/f5cf6c83fcfb5dd24c2d&#34;&gt;Python で複素数を扱う - Qiita&lt;/a&gt;」。感動ものとあるので、試す。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;print((1 + 2j) * (3 + 4j))
# (-5+10j)
print((1 + 2j) / (3 + 4j))
# (0.44+0.08j))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ホンマ、感動や。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>このメモの作成方法</title>
      <link>http://ged1959.github.io/python/post/first_memo/</link>
      <pubDate>Mon, 21 Mar 2016 15:14:20 +0900</pubDate>
      
      <guid>http://ged1959.github.io/python/post/first_memo/</guid>
      <description>

&lt;p&gt;READMEに書いた通り、pythonの勉強用のメモ。忘れっぽいので。&lt;/p&gt;

&lt;h2 id=&#34;このサイトの作成法:e8fb9c67eba912c72729806db31eaa1b&#34;&gt;このサイトの作成法&lt;/h2&gt;

&lt;p&gt;hugoで作った。こちらも、やっぱり忘れるだろうから、以下に。&lt;/p&gt;

&lt;h3 id=&#34;localにサイトを作る:e8fb9c67eba912c72729806db31eaa1b&#34;&gt;localにサイトを作る&lt;/h3&gt;

&lt;p&gt;まず、サイトの基本を作成。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hugo new site python_memo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;テーマフォルダを作る。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mkdir themes
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;テーマをクローンする。（作者に感謝！！）&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone https://github.com/tanksuzuki/angels-ladder
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;archetypesフォルダにdefault.mdを作る。内容は以下。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;+++
date = &amp;quot;now()&amp;quot;
draft = true
slug = &amp;quot;&amp;quot;
tags = [&amp;quot;&amp;quot;, &amp;quot;&amp;quot;]
title = &amp;quot;&amp;quot;
+++
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;config.tomlを編集する。内容は以下。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;baseurl = &amp;quot;http://ged1959.github.io/python/&amp;quot;
languageCode = &amp;quot;ja-jp&amp;quot;
title = &amp;quot;My Memo&amp;quot;
canonifyurls = true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;postを一つ作る。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hugo new post/first.md
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上に、何かを書き込んで、以下で動作テスト。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hugo server -t angels-ladder -D
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;githubにアップする:e8fb9c67eba912c72729806db31eaa1b&#34;&gt;Githubにアップする&lt;/h3&gt;

&lt;p&gt;アップロード用のデータを作成する。記事中の&lt;code&gt;draft = true&lt;/code&gt;は&lt;code&gt;draft = false&lt;/code&gt;とする。コマンドでもいいらしい。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hugo undraft content\post\first.md
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で、作成。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hugo -t angels-ladder
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;publicのフォルダができる。中のindex.htmlをクリックすると、サイトが見える、という訳ではない。たぶん、上で&lt;code&gt;path&lt;/code&gt;を決めたから。で、publicへ。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd public/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;gitにする。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git init
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;リモートリポジトリを指定する。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git remote add origin https://github.com/ged1959/python.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;gh-pagesのbranchを作成し、branchを移動する。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git checkout -b gh-pages
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;続いて、お決まりの手順。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git add .
git commit -m &amp;quot;1st commit&amp;quot;
git push -u origin gh-pages
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以上。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>